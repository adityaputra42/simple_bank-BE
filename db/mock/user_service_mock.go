// Code generated by MockGen. DO NOT EDIT.
// Source: api/service/user_service.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	request "simple_bank_solid/model/web/request"
	response "simple_bank_solid/model/web/response"

	gomock "github.com/golang/mock/gomock"
)

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// CreateAdmin mocks base method.
func (m *MockUserService) CreateAdmin(req request.CreateUser) (response.UserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAdmin", req)
	ret0, _ := ret[0].(response.UserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAdmin indicates an expected call of CreateAdmin.
func (mr *MockUserServiceMockRecorder) CreateAdmin(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAdmin", reflect.TypeOf((*MockUserService)(nil).CreateAdmin), req)
}

// CreateUser mocks base method.
func (m *MockUserService) CreateUser(req request.CreateUser) (response.UserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", req)
	ret0, _ := ret[0].(response.UserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserServiceMockRecorder) CreateUser(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserService)(nil).CreateUser), req)
}

// Delete mocks base method.
func (m *MockUserService) Delete(username string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", username)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUserServiceMockRecorder) Delete(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserService)(nil).Delete), username)
}

// FecthAllUser mocks base method.
func (m *MockUserService) FecthAllUser() ([]response.UserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FecthAllUser")
	ret0, _ := ret[0].([]response.UserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FecthAllUser indicates an expected call of FecthAllUser.
func (mr *MockUserServiceMockRecorder) FecthAllUser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FecthAllUser", reflect.TypeOf((*MockUserService)(nil).FecthAllUser))
}

// FecthUser mocks base method.
func (m *MockUserService) FecthUser(username string) (response.UserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FecthUser", username)
	ret0, _ := ret[0].(response.UserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FecthUser indicates an expected call of FecthUser.
func (mr *MockUserServiceMockRecorder) FecthUser(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FecthUser", reflect.TypeOf((*MockUserService)(nil).FecthUser), username)
}

// Login mocks base method.
func (m *MockUserService) Login(req request.LoginUser) (bool, response.LoginResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", req)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(response.LoginResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Login indicates an expected call of Login.
func (mr *MockUserServiceMockRecorder) Login(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserService)(nil).Login), req)
}

// UpdatePassword mocks base method.
func (m *MockUserService) UpdatePassword(req request.UpdateUser, username string) (response.UserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassword", req, username)
	ret0, _ := ret[0].(response.UserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePassword indicates an expected call of UpdatePassword.
func (mr *MockUserServiceMockRecorder) UpdatePassword(req, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*MockUserService)(nil).UpdatePassword), req, username)
}
