// Code generated by MockGen. DO NOT EDIT.
// Source: api/service/account_service.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	request "simple_bank_solid/model/web/request"
	response "simple_bank_solid/model/web/response"

	gomock "github.com/golang/mock/gomock"
)

// MockAccountService is a mock of AccountService interface.
type MockAccountService struct {
	ctrl     *gomock.Controller
	recorder *MockAccountServiceMockRecorder
}

// MockAccountServiceMockRecorder is the mock recorder for MockAccountService.
type MockAccountServiceMockRecorder struct {
	mock *MockAccountService
}

// NewMockAccountService creates a new mock instance.
func NewMockAccountService(ctrl *gomock.Controller) *MockAccountService {
	mock := &MockAccountService{ctrl: ctrl}
	mock.recorder = &MockAccountServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountService) EXPECT() *MockAccountServiceMockRecorder {
	return m.recorder
}

// CreateAccount mocks base method.
func (m *MockAccountService) CreateAccount(req request.AccountRequest) (response.AccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", req)
	ret0, _ := ret[0].(response.AccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockAccountServiceMockRecorder) CreateAccount(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockAccountService)(nil).CreateAccount), req)
}

// DeleteAccount mocks base method.
func (m *MockAccountService) DeleteAccount(Id, userId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccount", Id, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccount indicates an expected call of DeleteAccount.
func (mr *MockAccountServiceMockRecorder) DeleteAccount(Id, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccount", reflect.TypeOf((*MockAccountService)(nil).DeleteAccount), Id, userId)
}

// FetchAccountById mocks base method.
func (m *MockAccountService) FetchAccountById(Id, userId int64) (response.AccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAccountById", Id, userId)
	ret0, _ := ret[0].(response.AccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAccountById indicates an expected call of FetchAccountById.
func (mr *MockAccountServiceMockRecorder) FetchAccountById(Id, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAccountById", reflect.TypeOf((*MockAccountService)(nil).FetchAccountById), Id, userId)
}

// FetchAllAccount mocks base method.
func (m *MockAccountService) FetchAllAccount() ([]response.AccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAllAccount")
	ret0, _ := ret[0].([]response.AccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAllAccount indicates an expected call of FetchAllAccount.
func (mr *MockAccountServiceMockRecorder) FetchAllAccount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAllAccount", reflect.TypeOf((*MockAccountService)(nil).FetchAllAccount))
}

// FetchAllAccountByUser mocks base method.
func (m *MockAccountService) FetchAllAccountByUser(UserId int64) ([]response.AccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAllAccountByUser", UserId)
	ret0, _ := ret[0].([]response.AccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAllAccountByUser indicates an expected call of FetchAllAccountByUser.
func (mr *MockAccountServiceMockRecorder) FetchAllAccountByUser(UserId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAllAccountByUser", reflect.TypeOf((*MockAccountService)(nil).FetchAllAccountByUser), UserId)
}
